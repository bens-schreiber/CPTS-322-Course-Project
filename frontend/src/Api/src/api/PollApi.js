/*
 * PollPal API
 * Your project description
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.55
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import PatchedPollSetAcceptingAnswersRequest from '../model/PatchedPollSetAcceptingAnswersRequest';
import PollNextQuestion from '../model/PollNextQuestion';
import PollNextQuestionRequest from '../model/PollNextQuestionRequest';
import PollSetAcceptingAnswers from '../model/PollSetAcceptingAnswers';
import PollSubmitResponse from '../model/PollSubmitResponse';
import PollSubmitResponseRequest from '../model/PollSubmitResponseRequest';

/**
* Poll service.
* @module api/PollApi
* @version 1.0.0
*/
export default class PollApi {

    /**
    * Constructs a new PollApi. 
    * @alias module:api/PollApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the pollAnswerRetrieve operation.
     * @callback moduleapi/PollApi~pollAnswerRetrieveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} pollId 
     * @param {module:api/PollApi~pollAnswerRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pollAnswerRetrieve(pollId, callback) {
      
      let postBody = null;
      // verify the required parameter 'pollId' is set
      if (pollId === undefined || pollId === null) {
        throw new Error("Missing the required parameter 'pollId' when calling pollAnswerRetrieve");
      }

      let pathParams = {
        'poll_id': pollId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/poll/{poll_id}/answer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pollNextQuestionCreate operation.
     * @callback moduleapi/PollApi~pollNextQuestionCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollNextQuestion{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PollNextQuestionRequest} body 
     * @param {module:api/PollApi~pollNextQuestionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pollNextQuestionCreate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pollNextQuestionCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PollNextQuestion;

      return this.apiClient.callApi(
        '/api/poll/next-question', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pollSetAcceptingAnswerPartialUpdate operation.
     * @callback moduleapi/PollApi~pollSetAcceptingAnswerPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollSetAcceptingAnswers{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPollSetAcceptingAnswersRequest} opts.body 
     * @param {module:api/PollApi~pollSetAcceptingAnswerPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pollSetAcceptingAnswerPartialUpdate(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PollSetAcceptingAnswers;

      return this.apiClient.callApi(
        '/api/poll/set-accepting-answer', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pollSubmitResponseUpdate operation.
     * @callback moduleapi/PollApi~pollSubmitResponseUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollSubmitResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PollSubmitResponseRequest} body 
     * @param {module:api/PollApi~pollSubmitResponseUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pollSubmitResponseUpdate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pollSubmitResponseUpdate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PollSubmitResponse;

      return this.apiClient.callApi(
        '/api/poll/submit-response', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}